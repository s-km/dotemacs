#+TITLE: My Emacs Config

* About

  I decided to give the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] meme a try, since it seems
  pretty suited to things like this where the basic structure/skeleton
  of the code (hopefully) doesn't change around much and it's easy to
  forget what each little function or variable does. I also wanted an
  excuse to play around with =org-mode= and this seemed like a good way
  to do it while getting a shareable, decent looking config file out of
  it.

  I'm still pretty new to emacs, so this will probably be getting
  updated fairly often. Can't really guarantee that if you =git clone=
  this you'll have a perfect, working emacs setup - if that's what
  you're looking for, =spacemacs= is pretty much emacs with a bunch of
  popular defaults configured for you out of the box. If you do use
  this, it's probably best to just copy bits and pieces and see how
  they work for you and interact with your own config.

* Init

  Entry point for =my/load-literate-config=, idea stolen from
  [[https://github.com/wasamasa][wasamasa]]. Not really much faster thatn just using =org-babel= but the
  error messages are a lot easier to work with, so I'm sticking to it
  for now.

  If you really mess things up, you can =M-x org-babel-tangle= and the
  config in here will get exported as a regular =.el= file to whatever
  file you specify in the properties section below. The error messages
  are usually pretty clear, so you shouldn't need to use this much at all.
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ./tangled.el
  :END:

  #+BEGIN_SRC emacs-lisp
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

    (setq exec-path (append exec-path '("c:/Program Files/Git/mingw64/bin/"
                                        "c:/Program Files/Git/usr/bin/")))

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile
      (require 'use-package))
    (setq use-package-verbose t)
    (setq use-package-always-ensure t)
  #+END_SRC

* General
** Appearance

   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)

     (setq indicate-empty-lines t)

     (global-linum-mode t)
     ;;(line-number-mode t)
     (global-hl-line-mode t)

     (add-to-list 'default-frame-alist '(internal-border . 0))

     (display-time-mode t)
     (setq display-time-24hr-format t)

     (set-face-attribute 'default nil
                         :family  "Terminus"
                         :height  90
                         :weight  'normal
                         :width   'normal)
     (load-theme 'gruvbox t)
   #+END_SRC

** Startup Behaviour

   #+BEGIN_SRC emacs-lisp
     (setq custom-safe-themes t
           inhibit-splash-screen t
           inhibit-startup-message t
           inhibit-startup-echo-area-message t)

     (setq show-paren-delay 0)
     (show-paren-mode t)

     (setq debug-on-error t)
   #+END_SRC

** Better Defaults

   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)

     ;; set up a central backup directory
     (setq backup-directory-alist
           '(("." . "~/.emacs.d/backup")))

     ;; prompt with y/n instead of yes/no
     (fset 'yes-or-no-p 'y-or-n-p)

     ;; keep cache from being compacted every GC because windows a shit
     (setq inhibit-compacting-font-caches t)

     ;; replace tabs with spaces, indent using 2 spaces
     (setq-default indent-tabs-mode nil
                   tab-width 2)

     ;; get rid of spammy bell
     (setq ring-bell-function 'ignore)
   #+END_SRC

* Packages
** Emacs UI
*** Themes

    #+BEGIN_SRC emacs-lisp
      (use-package cyberpunk-theme
        :defer t)
      (use-package dracula-theme
        :defer t)
      (use-package gruvbox-theme
        :defer t)
      (use-package sunburn-theme
        :defer t)
      (use-package zenburn-theme
        :defer t)
    #+END_SRC

*** Telephone Line

    #+BEGIN_SRC emacs-lisp
      (use-package telephone-line
        :after (evil)
        :config
        (telephone-line-evil-config))
    #+END_SRC

*** Neotree

    #+BEGIN_SRC emacs-lisp
      (defun neotree-project-dir ()
        "Open NeoTree using git root."
        (interactive)
        (let ((project-dir (projectile-project-root))
              (file-name (buffer-file-name)))
          (neotree-toggle)
          (if project-dir
              (if (neo-global--window-exists-p)
                  (progn
                    (neotree-dir project-dir)
                    (neotree-find file-name)))
            (message "Could not find git project root."))))

      (use-package neotree
        :init
        (add-hook 'neotree-mode-hook
                  (lambda ()
                    (evil-define-key 'normal neotree-mode-map [tab] 'neotree-enter)
                    (evil-define-key 'normal neotree-mode-map (kbd "j") 'neotree-next-line)
                    (evil-define-key 'normal neotree-mode-map (kbd "k") 'neotree-previous-line)
                    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-change-root)))

        :config
        (global-set-key [f10] 'neotree-project-dir)
        (setq neo-theme 'arrow))
    #+END_SRC

** Company

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :diminish company
       :config
       (global-company-mode)

       (defun my/python-mode-hook ()
         (add-to-list 'company-backends 'company-jedi))
       (add-hook 'python-mode-hook 'my/python-mode-hook)

       (setq company-selection-wrap-around t)
       (define-key company-active-map (kbd "ESC") 'company-abort)
       (define-key company-active-map [tab] 'company-complete-common-or-cycle))
   #+END_SRC

** Evil

   #+BEGIN_SRC emacs-lisp
     (defun my-evil-leader-config ()
       "<leader> bindings for evil"
       (evil-leader/set-leader ",")
       (evil-leader/set-key
         "i" 'helm-imenu
         "," 'helm-mini
         "x" 'helm-M-x))

     (use-package evil
       :config
       (evil-mode t)
       (evil-select-search-module 'evil-search-module 'evil-search)

       (use-package evil-leader
         :config
         (global-evil-leader-mode)
         (my-evil-leader-config))

       (use-package evil-surround
         :config
         (global-evil-surround-mode)))

     (evil-add-hjkl-bindings occur-mode 'emacs
       (kbd "/") 'evil-search-forward
       (kbd "n") 'evil-search-next
       (kbd "N") 'evil-search-previous
       (kbd "C-d") 'evil-scroll-down
       (kbd "C-u") 'evil-scroll-up)

     (evil-add-hjkl-bindings package-menu-mode 'emacs)
   #+END_SRC

** Helm

   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :config
       (setq helm-M-x-fuzzy-match t
             helm-buffers-fuzzy-matching t)
       (use-package helm-projectile)
       (helm-mode t)
       (helm-projectile-on))
   #+END_SRC

** Magit

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :defer t)
   #+END_SRC

** Languages
*** Elixir

    #+BEGIN_SRC emacs-lisp
      (use-package elixir-mode
        :hook (elixir-mode . alchemist-mode)
        :defer t)

      (use-package alchemist
        :defer t)
    #+END_SRC

*** Haskell

    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode
        :mode "\\.hs\\'"
        :hook (haskell-mode . intero-mode)
        :defer t)

      (use-package intero
        :defer t)
    #+END_SRC

*** Javascript

    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :mode "\\.js\\'"
        :defer t
        :config
        (setq js2-basic-offset 2)
        (setq js2-strict-missing-semi-warning nil)
        (setq js2-bounce-indent-p t))

      (use-package css-mode
        :ensure nil
        :hook (css-mode . rainbow-mode)
        :config
        (use-package rainbow-mode
          :defer t)
        (setq css-indent-offset 2))

    #+END_SRC

*** Python

    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :defer t
        :hook (python-mode . elpy-mode)
        :config
        (elpy-enable)
        (setq elpy-rpc-backend "jedi"))

      (defun my/common-installs ()
        (shell-command "pip install jedi autopep8 yapf"))

      (use-package virtualenvwrapper
        :defer t
        :hook (venv-postmkvirtualenv . my/common-installs)
        :config
        (venv-initialize-eshell))
    #+END_SRC

*** Scala

    #+BEGIN_SRC emacs-lisp

    #+END_SRC

*** Racket

    #+BEGIN_SRC emacs-lisp
      (use-package racket-mode
        :mode "\\.rkt\\'"
        :defer t)
    #+END_SRC

** Novel
** Projectile

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :config
       (projectile-global-mode))
   #+END_SRC

** Smartparens

   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :config
       (smartparens-global-mode t))
   #+END_SRC

** Yasnippet

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :defer t
       :diminish yas
       :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
       :init
       (yas-global-mode t)
       :config
       (setq yas-snippet-dirs
             '("~/.emacs.d/snippets")))
   #+END_SRC

* Orgmode

  #+BEGIN_SRC emacs-lisp
    (defun my/modules ()
      (add-to-list 'org-modules 'org-habit))
    (eval-after-load "org" '(my/modules))

    (defface org-block-background
      '((t (:background "#353231")))
      "Face used for src block background")

    (setq org-src-fontify-natively t
          org-hide-emphasis-markers t
          org-src-tab-acts-natively t)

    (global-set-key (kbd "C-c c") 'org-capture)
    (setq org-default-notes-file "z:/orgmode/notes.org")
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
            ("e" "Empty" entry (file+datetree (concat org-directory "/mem.org"))
             "* %^{Description} %^g\n%?\nAdded: %U")))
  #+END_SRC

* IRC
  #+BEGIN_SRC emacs-lisp
    (setq erc-nick "s2mitrov")
  #+END_SRC
* =my/= Functions

  #+BEGIN_SRC emacs-lisp
    (defun my/init-reload (&optional refresh)
      "Reloads init.el, optionally refreshing the package list beforehand"
      (interactive
       (list (y-or-n-p "Refresh package contents? ")))
      (progn
        (when refresh (package-refresh-contents))
        (load-file "~/.emacs.d/init.el")))
  #+END_SRC

* Keybindings

  #+BEGIN_SRC emacs-lisp
    (global-set-key [C-tab] 'other-window)
    (global-set-key [C-S-tab] (lambda () (interactive) (other-window -1)))
    (global-set-key (kbd "M-x") 'helm-M-x)

  #+END_SRC~/.emacs.d/

* Registers

  #+BEGIN_SRC emacs-lisp
    (set-register ?p (cons 'file "z:/Projects/"))
    (set-register ?c (cons 'file "~/.emacs.d/init.org"))
    (set-register ?o (cons 'file "z:/orgmode"))
    (set-register ?s (cons 'file "z:/Projects/scratchpads"))
    (set-register ?m (cons 'file "m:/"))
  #+END_SRC
